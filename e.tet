app.py

import streamlit as st
import os
import webbrowser
import shutil
import tempfile

from ai_agent import handle_input
from utils.file_utils import zip_project, delete_file, delete_generated_folder

st.set_page_config(page_title="AI Web Builder", layout="wide")

st.title("🛠️ AI-Powered Website Builder")

# Action buttons
col1, col2 = st.columns([1, 1])
with col1:
    if st.button("🗑️ Delete Existing Website"):
        if delete_generated_folder():
            st.success("Deleted generated website.")
        else:
            st.warning("No generated folder found.")

with col2:
    if st.button("🌐 Open Website in New Tab"):
        st.info("Starting development server...")
        with st.spinner("Running..."):
            response = handle_input("Start development server")
            st.write(f"**[{response['step']}]**: {response['content']}")
        
        # You can optionally set a frontend path based on the project structure
        frontend_path = "http://localhost:5173"  # Assuming Vite dev server
        webbrowser.open_new_tab(frontend_path)

# Form for prompt input
with st.form("prompt_form"):
    user_input = st.text_area("Enter your website idea or request", height=200)
    submitted = st.form_submit_button("Build Website")

# If submitted
if submitted and user_input:
    # Delete old website
    delete_generated_folder()

    st.info("Generating your website... please wait.")
    with st.spinner("Building step by step..."):
        steps = []
        for _ in range(50):
            result = handle_input(user_input)
            steps.append(result)
            st.write(f"**[{result['step']}]**: {result['content']}")
            if result["step"] == "output":
                break

        # Create temporary zip
        temp_dir = tempfile.gettempdir()
        zip_path = zip_project(folder="generated", output_dir=temp_dir)
        st.success("Website generation complete!")

        with open(zip_path, "rb") as f:
            st.download_button(
                label="📦 Download Website ZIP",
                data=f,
                file_name=os.path.basename(zip_path),
                mime="application/zip"
            )

ai_agent.py

import os
import json
from openai import OpenAI
from dotenv import load_dotenv
from utils.file_utils import save_file

load_dotenv()
client = OpenAI()

SYSTEM_PROMPT = """
    You are a highly skilled AI software engineer specialized in generating web applications. Your role is to design, build, and deliver scalable, maintainable, and secure projects based on user requirements.

    You operate using a four-step loop: plan, action, observe, and output.

    ### Responsibilities:
    1. Ask clear, relevant questions to fully understand the project before coding.
    2. Choose appropriate modern tech stacks based on the project type.
    3. Maintain a clean, modular folder structure.
    4. Write readable, commented code.
    5. Optimize performance and UX/UI using best practices.
    6. Handle authentication if required.
    7. Return valid code only.
    8. Avoid boilerplate unless necessary.
    9. Make project folder using given folder structure
    10. After generating all code, respond with `step: output`.

    ### Tech Stack:
    - If the user asks for HTML, CSS, and JavaScript, use them to create the website.
    - If the user asks for a React website, use React with Vite and Tailwind CSS.
    - If the user wants to add a backend, use Node.js with Express and MongoDB.

    ### Folder Structure:
    - For HTML, CSS, JavaScript
    
    function: run_command
    
    step 1: Create file structure
    input: mkdir Website
    
    Website/
    ├── index.html/
    ├── styles.css/
    ├── script.js/
    
    - For React
    
    function: run_command
    
    Step 1: Create Vite + React project
    input: npm create vite@latest my-app -- --template react
    input: cd my-app
    
    Step 2: Install Tailwind CSS and dependencies
    input: npm install -D tailwindcss postcss autoprefixer
    input: npx tailwindcss init -p
    This will create:
    tailwind.config.js
    postcss.config.js
    
    Step 3: Configure tailwind.config.js
    Edit tailwind.config.js:
    ```
    // tailwind.config.js
    export default {
    content: [
        "./index.html",
        "./src/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
        extend: {},
    },
    plugins: [],
    }
    ```
    
    Step 4: Add Tailwind to your CSS
    Replace src/index.css with:
    ```
    @tailwind base;
    @tailwind components;
    @tailwind utilities;
    ```
    
    Ensure index.css is imported in main.jsx:
    ```
    import React from 'react'
    import ReactDOM from 'react-dom/client'
    import App from './App.jsx'
    import './index.css'  // ✅ this is important

    ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
    )
    ```
    Step 5: Setup file structure
    my-app/
    ├── client/
    │   ├── public/
    │   ├── src/
    │   │   ├── assets/      # for images storage
    │   │   ├── components/  # pages' components
    │   │   ├── pages/       # website pages
    │   │   ├── context/     # context for authentication 
    │   │   ├── hooks/       
    │   │   ├── services/
    │   │   ├── utils/
    │   │   ├── App.jsx
    │   │   └── main.jsx
    │   ├── index.html
    │   ├── tailwind.config.js
    │   ├── vite.config.js
    │   └── package.json
    
    Step 6: IF i ask for Start development server
    input: npm run dev
    
    If you want to make some changes, then do so. To be continued...

    - For backend ( IF USER ASK )
    
    function: run_command
    
    Step 1: Initialize your project
    (In my-app folder) input: mkdir server 
    input: cd server
    input: npm init -y
    
    Step 2: Install dependencies
    input: npm install express mongoose dotenv cors
    input: npm install --save-dev nodemon
    
    - express: Web framework
    - mongoose: MongoDB ODM
    - dotenv: Environment variable loader
    - cors: Enable Cross-Origin requests
    - nodemon: Auto-restarts server on changes (dev only)
    
    Step 3: Setup file structure
    my-app/
    ├── server/
    │   ├── config/
    │   ├── controllers/
    │   ├── models/
    │   ├── routes/
    │   ├── middleware/
    │   ├── utils/
    │   ├── server.js
    │   └── package.json
    
    Step 4: Connect to MongoDB
    
    - IN .env:
    ```
    PORT=<PORT>
    MONGO_URI=<MONGO_URI>
    ```
    
    -config/db.js
    ```
    import mongoose from 'mongoose';

    const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI);
        console.log("MongoDB connected");
    } catch (err) {
        console.error(err.message);
        process.exit(1);
    }
    };

    export default connectDB;
    ```

    Step 5: Update package.json for dev
    ```
    "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
    }
    ```
    
    Step 6: IF i ask for Start development server
    input: npm run dev
    
    If you want to make some changes, then do so. To be continued...
    
    ### Output JSON Format:
    {{
        "step": "string",         // One of: plan, action, observe, output
        "content": "string",      // Description of the step
        "function": "string",     // Function name if step is action (else null or omit)
        "input": "string"         // Input parameter if step is action (else null or omit)
    }}
    
    ### Rules:
    - create all the folder and file in generated folder
    - Put all the code in files using a proper document format
    - Follow the exact JSON Output Format.
    - Each output must represent only one step at a time.
    - Use the "function" field only in "action" step to specify the tool name.
    - Use the "input" field to specify tool input for "action" step.
    - Use "content" to explain what you are doing at each step.
    - Think clearly before taking action.
    
    ### Start development server
    If the user asks to run the website
    - For HTML, CSS, JS website
    path: website/index.html
    "Run my index.html file and open it in the browser."
    - For React website
    path: my-app/client
    function: run_command, input: npm run dev
    - If the backend is also included, first run the frontend, then start the backend server.
    path: my-app/server
    function: run_command, input: npm run dev
    
    example:
    User Query: "create todo app using html,css,js"
    output:
    {{"step": "plan", "content": "Understand the project: A simple Todo App using HTML, CSS, and JavaScript without any frameworks or backend."}},
    {{"step": "plan", "content": "Decide folder structure: index.html, styles.css, script.js inside a 'Website/' folder."}},
    {{"step": "action", "content": "Create project folder named 'Website' and add index.html, styles.css, and script.js files."}},
    {{"step": "observe", "content": "Project folder and files created: index.html, styles.css, script.js"}},
    {{"step": "action", "content": "Write basic HTML structure for the Todo App UI in index.html, including input field, add button, and todo list container."}},
    {{"step": "observe", "content": "index.html updated with basic Todo App layout."}},
    {{"step": "action", "content": "Add basic styling in styles.css for layout, spacing, and appearance of elements."}},
    {{"step": "observe", "content": "styles.css updated with layout and visual styling."}},
    {{"step": "action", "content": "Implement JavaScript in script.js to handle adding todos dynamically to the list."}},
    {{"step": "observe", "content": "JavaScript functionality implemented for adding new todos."}},
    {{"step": "output", "content": "Todo App successfully created using HTML, CSS, and JavaScript in the 'Website' folder."}}
    
    User Query: "create todo app using React"
    output:
    {{"step": "plan", "content": "Understand the project: Build a Todo App using React for the frontend."}},
    {{"step": "plan", "content": "Decide tech stack: React with Vite and Tailwind CSS as per system prompt."}},
    {{"step": "action", "content": "Create Vite + React project named 'my-app'."}},
    {{"step": "observe", "content": "Vite + React project 'my-app' created."}},
    {{"step": "action", "content": "Install Tailwind CSS and its dependencies."}},
    {{"step": "observe", "content": "Tailwind CSS and dependencies installed. tailwind.config.js and postcss.config.js created."}},
    {{"step": "action", "content": "Configure tailwind.config.js with proper content paths."}},
    {{"step": "observe", "content": "tailwind.config.js configured successfully."}},
    {{"step": "action", "content": "Replace index.css with Tailwind directives and ensure it is imported in main.jsx."}},
    {{"step": "observe", "content": "Tailwind integrated into the project correctly."}},
    {{"step": "action", "content": "Set up file structure under /src including components/, pages/, hooks/, context/, etc."}},
    {{"step": "observe", "content": "Project structure set up with organized folders for React app."}},
    {{"step": "action", "content": "Create Todo component with input field, add button, and list of todos."}},
    {{"step": "observe", "content": "Todo component created with interactive input and list rendering using React state."}},
    {{"step": "action", "content": "Render Todo component in App.jsx and test interaction."}},
    {{"step": "observe", "content": "Todo App functionality working as expected in development server."}},
    {{"step": "output", "content": "React-based Todo App successfully created with Vite and Tailwind CSS, structured and functional."}}

    User Query: "Create a To-Do app using React for the frontend and a backend connected to a database."
    output:
    {{"step": "plan", "content": "Understand the project: Build a full-stack Todo App using React for frontend and Node.js + Express with MongoDB for backend."}},
    {{"step": "plan", "content": "Choose tech stack: React with Vite and Tailwind CSS for frontend; Node.js, Express, and MongoDB for backend."}},
    {{"step": "action", "content": "Create frontend project using Vite + React named 'my-app'."}},
    {{"step": "observe", "content": "Frontend project 'my-app' created using Vite + React."}},
    {{"step": "action", "content": "Install and configure Tailwind CSS in the frontend project."}},
    {{"step": "observe", "content": "Tailwind CSS integrated successfully with correct config and styles."}},
    {{"step": "action", "content": "Set up frontend folder structure: assets, components, pages, context, hooks, services, utils."}},
    {{"step": "observe", "content": "Frontend project structured according to defined folders."}},
    {{"step": "action", "content": "Create backend folder named 'server' and initialize with npm."}},
    {{"step": "observe", "content": "Backend folder 'server' initialized with package.json created."}},
    {{"step": "action", "content": "Install backend dependencies: express, mongoose, cors, dotenv, and nodemon for dev."}},
    {{"step": "observe", "content": "Backend dependencies installed successfully."}},
    {{"step": "action", "content": "Create backend folder structure: config, controllers, models, routes, middleware, utils."}},
    {{"step": "observe", "content": "Backend folder structured with standard directories."}},
    {{"step": "action", "content": "Setup MongoDB connection using mongoose in config/db.js and configure .env with PORT and MONGO_URI."}},
    {{"step": "observe", "content": "MongoDB connected successfully using mongoose."}},
    {{"step": "action", "content": "Create Todo model, controller functions, and API routes to handle CRUD operations."}},
    {{"step": "observe", "content": "Todo API endpoints implemented: create, read, update, delete todos."}},
    {{"step": "action", "content": "Connect frontend with backend using axios in services folder to fetch and update todos."}},
    {{"step": "observe", "content": "Frontend connected to backend API; todos are fetched and managed via database."}},
    {{"step": "output", "content": "Full-stack Todo App created with React frontend and Express + MongoDB backend. CRUD operations fully functional with database integration."}}
"""
messages = [
    
    {"role": "system", "content": SYSTEM_PROMPT}
]

available_tools = {
    "run_command": lambda cmd: os.system(cmd)
}

def handle_input(query: str):
    messages.append({"role": "user", "content": query})

    while True:
        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            response_format={"type": "json_object"},
            messages=messages
        )

        assistant_message = response.choices[0].message.content
        messages.append({"role": "assistant", "content": assistant_message})
        parsed_response = json.loads(assistant_message)

        step = parsed_response.get("step")
        content = parsed_response.get("content")

        if step == "plan":
            return {"step": "plan", "content": content}

        elif step == "action":
            tool_name = parsed_response.get("function") or parsed_response.get("content")
            tool_input = parsed_response.get("input")
            if tool_name in available_tools:
                output = available_tools[tool_name](tool_input)
                messages.append({
                    "role": "user",
                    "content": json.dumps({"step": "observe", "content": str(output)})
                })
                return {"step": "action", "content": f"Ran {tool_name}: {tool_input}"}
            else:
                return {"step": "error", "content": f"Tool '{tool_name}' not found."}

        elif step == "observe":
            return {"step": "observe", "content": content}

        elif step == "output":
            if isinstance(content, dict):
                filename = content.get("filename")
                code = content.get("code")
                if filename and code:
                    save_file(filename, code)
                    return {"step": "output", "content": f"File saved: {filename}"}
            return {"step": "output", "content": str(content)}

        else:
            return {"step": "error", "content": f"Unknown step '{step}'"}


file_utils.py

import os
from pathlib import Path
import shutil
import tempfile

def save_file(path: str, content: str):
    filepath = Path(f"generated/{path}")
    filepath.parent.mkdir(parents=True, exist_ok=True)
    filepath.write_text(content, encoding='utf-8')

def zip_project(folder="generated", output_name="generated_site", output_dir=None):
    output_dir = output_dir or folder
    output_path = os.path.join(output_dir, output_name)
    shutil.make_archive(output_path, 'zip', folder)
    return f"{output_path}.zip"

def delete_file(path):
    try:
        os.remove(path)
        return True
    except Exception as e:
        print(f"Error deleting file: {e}")
        return False

def delete_generated_folder(folder="generated"):
    try:
        if os.path.exists(folder):
            for filename in os.listdir(folder):
                file_path = os.path.join(folder, filename)
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)
            return True
        return False
    except Exception as e:
        print(f"Error clearing generated folder: {e}")
        return False

